data %<>% bind_df(chr_z)
rank_and_nb_group(data[data$year == 2016,],
"social_and_economic",
plot_title = "Social and Economic Health Factors, 2016",
y_title = "Average Peer City",
text = FALSE,
h_line = TRUE)
rank_and_nb_group(data[data$year == 2016,],
"health_behaviors",
plot_title = "Health Behaviors, 2016",
y_title = "Average Peer City",
text = FALSE,
h_line = TRUE)
rank_and_nb_group(data[data$year == 2016,],
"clinical_care",
plot_title = "Clinical Care, 2016",
y_title = "Average Peer City",
text = FALSE,
h_line = TRUE)
rank_and_nb_group(data[data$year == 2016,],
"physical_environment",
plot_title = "Physical Environment, 2016",
y_title = "Average Peer City",
text = FALSE,
h_line = TRUE)
insurance <- acs_time("/data/health/C27001/", starting_year = 2009)
insurance %<>%
mutate(
total = `Estimate; Total:`,
uninsured_rate =
(`Estimate; Male: - Under 18 years: - No health insurance coverage` +
`Estimate; Male: - 18 to 64 years: - No health insurance coverage` +
`Estimate; Male: - 65 years and over: - No health insurance coverage` +
`Estimate; Female: - Under 18 years: - No health insurance coverage` +
`Estimate; Female: - 18 to 64 years: - No health insurance coverage` +
`Estimate; Female: - 65 years and over: - No health insurance coverage`)
/ total * 100,
insured_rate = 100 - uninsured_rate) %>%
weight_stl('insured_rate', 'total')
data %<>% bind_df(insurance)
data %<>% select(FIPS, city, year, current, baseline, everything())
rm(insurance)
rank_and_nb_group(data[data$year == 2016,],
'insured_rate',
plot_title = 'Health Insurance, 2016')
#read in, clean, and join files:
#total number of deaths
total_deaths <- read_tsv("data/health/overdoses/age/total_deaths.txt")
#total number of non-overdose deaths
non_od_deaths <- read_tsv("data/health/overdoses/age/non_overdose_deaths.txt")
#total number of deaths for each age combined with age 74
unsuppressed_total_deaths <- wonder_time_single("data/health/overdoses/age/single-age_total_deaths")
#total number of non-overdose deaths for each age combined with age 74
unsuppressed_non_od_deaths <- wonder_time_single("data/health/overdoses/age/single-age_non_od_deaths")
total_deaths %<>%
clean_wonder() %>%
rename(total_deaths = deaths)
non_od_deaths %<>%
clean_wonder() %>%
rename(non_od_deaths = deaths) %>%
select(-population)
unsuppressed_total_deaths %<>%
clean_wonder() %>%
rename(total_deaths_plus_74 = deaths,
pop_plus_74 = population)
unsuppressed_non_od_deaths %<>%
clean_wonder() %>%
rename(non_od_deaths_plus_74 = deaths) %>%
select(-population)
overdose <-
full_join(total_deaths, non_od_deaths, by =  c("FIPS", "year", "age")) %>%
full_join(unsuppressed_total_deaths, by =  c("FIPS", "year", "age")) %>%
full_join(unsuppressed_non_od_deaths, by =  c("FIPS", "year", "age"))
#extract values for age 74 and append to data frame
overdose74 <- overdose %>%
filter(age == 74) %>%
select(
FIPS, year,
total_deaths_74 = total_deaths,
non_od_deaths_74 = non_od_deaths)
overdose %<>%
filter(age < 75) %>%
left_join(overdose74, by = c("FIPS", "year"))
#calculate missing values by subtracting the value for age 74 from (the value for that age + the value for age 74)
overdose %<>%
{
x <- .
bind_rows(
x %>% filter(age < 50) %>%
mutate(
total_deaths = total_deaths_plus_74 - total_deaths_74,
non_od_deaths = non_od_deaths_plus_74 - non_od_deaths_74),
x %>% filter(age >= 50))
}
#calculate overdose rates
overdose %<>%
mutate(od_deaths = total_deaths - non_od_deaths) %>%
select(FIPS, year, age, population, od_deaths) %>%
stl_adj_wonder()
#ypll calculation
overdose_ypll <- overdose %>%
group_by(FIPS, year) %>%
mutate(
years_lost = 75 - age,
od_years_lost = od_deaths * years_lost) %>%
ungroup() %>%
age_adj_rate(var = "od_years_lost") %>%
rename(overdose_ypll = rate)
od_rate <- overdose %>%
age_adj_rate(var = "od_deaths") %>%
rename(overdose_rate = rate)
overdose_count <- overdose %>%
select(-age) %>%
group_by(FIPS, year) %>%
summarise_all(sum) %>%
ungroup() %>%
select(FIPS, year, od_deaths) %>%
rename(overdoses = od_deaths)
overdose <- bind_df(overdose_ypll, od_rate, overdose_count)
setwd("data/health/overdoses/cause/all_years")
cocaine <- read_tsv("cocaine.txt")
fentanyl <- read_tsv("fentanyl.txt")
heroin <- read_tsv("heroin.txt")
meth <- read_tsv("methamphetamine.txt")
opioid <- read_tsv("opioid.txt")
prescription <- read_tsv("prescription opioid.txt")
cocaine %<>%
clean_wonder() %>%
rename(cocaine = deaths)
fentanyl %<>%
clean_wonder() %>%
rename(fentanyl = deaths) %>%
select(-population)
heroin %<>%
clean_wonder() %>%
rename(heroin = deaths) %>%
select(-population)
meth %<>%
clean_wonder() %>%
rename(meth = deaths) %>%
select(-population)
opioid %<>%
clean_wonder() %>%
rename(opioid = deaths) %>%
select(-population)
prescription %<>%
clean_wonder() %>%
rename(prescription = deaths) %>%
select(-population)
od_all_years <- full_join(cocaine, fentanyl) %>%
full_join(heroin) %>%
full_join(meth) %>%
full_join(opioid) %>%
full_join(prescription)
od_all_years %<>%
rename_at(vars(cocaine, fentanyl, heroin, meth, opioid, prescription, population), paste0, "_all")
setwd("../single-year_excluded")
opioid <- wonder_time_single("opioid", seq_var = "year", start = 1999)
prescription <- wonder_time_single("prescription opioid", seq_var = "year", start = 1999)
other <- wonder_time_single("other", seq_var = "year", start = 1999)
opioid %<>%
clean_wonder() %>%
rename(opioid = deaths) %>%
select(-population)
prescription %<>%
clean_wonder() %>%
rename(prescription = deaths) %>%
select(-population)
other %<>%
clean_wonder() %>%
mutate(
cod = replace(cod, cod == "T40.1", "heroin"),
cod = replace(cod, cod == "T40.4", "fentanyl"),
cod = replace(cod, cod == "T40.5", "cocaine"),
cod = replace(cod, cod == "T43.6", "meth")) %>%
spread(key = "cod", value = "deaths")
od_excluding <- full_join(opioid, prescription) %>%
full_join(other)
od_excluding %<>%
rename_at(vars(cocaine, fentanyl, heroin, meth, opioid, prescription, population), paste0, "_excluding")
od <- full_join(od_all_years, od_excluding, by = "FIPS")
od %<>%
transmute(
FIPS, year,
population = population_all - population_excluding,
cocaine = cocaine_all - cocaine_excluding,
fentanyl = fentanyl_all - fentanyl_excluding,
heroin = heroin_all - heroin_excluding,
meth = meth_all - meth_excluding,
opioid = opioid_all - opioid_excluding,
prescription = prescription_all - prescription_excluding) %>%
stl_adj_wonder() %>%
select(-population)
#%>% mutate_at(vars(cocaine, fentanyl, heroin, meth, opioid, prescription), . / population * 100000)
overdose %<>% bind_df(od)
overdose$FIPS <- replace(overdose$FIPS, overdose$FIPS == "01073", "1073")
data %<>% bind_df(overdose) %>% select(-city, -baseline, -current) %>% pull_peers_FIPS()
rank_and_nb_group(data[data$year == 2016,],
'overdose_rate',
plot_title = 'Overdoses, 2016',
y_title = "Overdose Deaths per 100,000 residents",
order = "Ascending")
graph_trendline(data,
'overdose_rate',
plot_title = 'Overdoses',
xmin = 2000,
y_title = "Overdose Deaths per 100,000 residents")
graph_df <- data %>%
filter(FIPS == 21111) %>%
select(-FIPS) %>%
select(year, overdoses, cocaine, fentanyl, heroin, meth, opioid, prescription) %>%
gather(2:8, key = "CoD", value = "deaths")
graph_df$CoD <- factor(graph_df$CoD,
levels = c("overdoses", "opioid",
"fentanyl", "heroin",
"prescription", "meth",
"cocaine"),
labels = c("Total Overdoses", "All Opioids",
"Fentanyl", "Heroin",
"Prescription Opioids", "Meth",
"Cocaine"))
ggplot(graph_df, aes(x = year, y = deaths, color = CoD)) +
geom_line(size = 1) +
geom_point(size = 1.8) +
scale_color_hue(
labels = c(
overdoses = "ods",
cocaine = "Cocaine",
fentanyl =  "Fentanyl",
heroin = "Heroin",
meth = "Meth",
opioid = "All Opioids",
prescription = "Prescription Opioids"
)) +
theme_bw() +
theme(text = element_text(family = "Museo Sans 300"),
legend.title=element_blank(),
legend.position = "right",
axis.text=element_text(size=24, family = "Museo Sans 300"),
axis.ticks.y=element_blank(),
plot.title=element_text(size=36, hjust=.5, family = "Museo Sans 300",
margin=margin(b=10,unit="pt")),
axis.title = element_text(size = 24),
legend.text=element_text(size=12, family = "Museo Sans 300"),
plot.caption = element_text(family = "Museo Sans 300"),
plot.subtitle = element_text(family = "Museo Sans 300", hjust = 0.5, size = 18)) +
labs(title = "Overdose Deaths by Drug",
x = "Year",
y = "overdoses",
caption = "Deaths can involve multiple drugs, so numbers do not usm to 100%.")
data %<>%
mutate(ypll_minus_od = ypll - overdose_ypll)
hyp <- data %>%
filter(current == 1) %>%
group_by(year) %>%
mutate(ypll_minus_od_index = -1 * norm_z(ypll_minus_od)) %>%
ungroup()
hyp %<>%
mutate(
health_index_minus_od =
ypll_minus_od_index * .5 +
pct_underweight_index * .2 +
poor_or_fair_index * .1 +
physdays_index * .1 +
mentdays_index * .1)
graph_trendline(
hyp,
var = 'ypll',
rollmean = 3,
plot_title = "Years of potential life lost per 100,000 Residents",
y_title="Years",
xmin = 2000,
xmax = 2016)
graph_trendline(
hyp,
var = 'ypll_minus_od',
rollmean = 3,
plot_title = "Years of potential life lost per 100,000 Residents",
y_title="Years",
xmin = 2000,
xmax = 2016)
graph_trendline(
hyp,
var = 'health_index',
rollmean = 3,
plot_title = "Health Index",
y_title="Years",
xmin = 2005,
xmax = 2016)
graph_trendline(
hyp,
var = 'health_index_minus_od',
rollmean = 3,
plot_title = "Health Index",
y_title="Years",
xmin = 2005,
xmax = 2016)
homocide <- read_tsv("data/health/homocide/homocide.txt")
homocide %<>%
clean_wonder() %>%
rename(homocide_rate = rate) %>%
weight_stl("homocide_rate", "population") %>%
pull_peers_FIPS()
graph_trendline(
homocide,
"homocide_rate",
xmin = 2000,
plot_title = "Homocide Rate",
rollmean = 3,
y_title = "Deaths per 100,000")
graph_trendline(
homocide,
"homocide_rate",
xmin = 2000,
plot_title = "Homocide Rate",
y_title = "Deaths per 100,000")
suicide <- read_tsv("data/health/suicide/total.txt")
suicide %<>%
filter(!is.na(Year)) %>%
select(
FIPS = `County Code`,
year = Year,
pop = Population,
suicide_rate = `Age Adjusted Rate`) %>%
mutate_at(vars(year, pop, suicide_rate), as.numeric) %>%
weight_stl("suicide_rate", "pop") %>%
pull_peers_FIPS()
graph_trendline(
suicide,
"suicide_rate",
xmin = 2000,
plot_title = "Suicide Rate",
rollmean = 3,
y_title="Deaths per 100,000")
graph_trendline(
suicide,
"suicide_rate",
xmin = 2000,
plot_title = "Suicide Rate",
y_title="Deaths per 100,000")
life_expectancy <- read_csv("data/health/KY_A.csv")
life_expectancy %<>%
mutate(TRACT = as.numeric(TRACT2KX),
life_expectancy = `e(0)`) %>%
select(TRACT, life_expectancy)
map_jc@data <- left_join(map_jc@data, life_expectancy)
make_map("life_expectancy",
name = "Life Expectancy",
legend_title = "Life<br/>Expectancy",
units = "years")
rm(life_expectancy)
setwd('C:/Users/Harrison Kirby/Desktop/GLP/ccu18/docs')
rmarkdown::render_site()
earn_data_05_16 <- acs_time("/data/jobs/S2001/05-16/")
earn_data_05_16 <- acs_time("/data/jobs/S2001/05/")
knitr::opts_knit$set(root.dir = "C:/Users/Harrison Kirby/Desktop/GLP/ccu18")
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = FALSE, fig.showtext=TRUE)
#Data
library(survey)
library(tidyverse)
library(magrittr)
library(feather)
library(labelled)
#Graphing
library(ggthemes)
library(classInt)
library(showtext)
library(reshape2)
library(rbokeh)
library(wesanderson)
library(kableExtra)
library(scales)
#Mapping
library(rgdal)
library(RColorBrewer)
library(leaflet)
#Make the dplyr select function the default over the plotly select function
select <- function(...){dplyr::select(...)}
source('helper_functions.R')
source('graphing_functions.R')
font_add("Museo Sans 300", "MuseoSans_300.otf")
font_add("Museo Sans 300 Italic", "MuseoSans_300_Italic.otf")
#Tract Map
map_jc = readOGR('data/maps/tract', layer = "JC Tracts",
GDAL1_integer64_policy = TRUE, stringsAsFactors = FALSE, verbose = FALSE)
map_jc$TRACT <- as.numeric(map_jc$TRACT)
nh_names <- read_csv('data/maps/tract_to_nh.csv')
nh_names$Id2 <- substr(nh_names$Id2, 6, 13)
nh_names$Id2 <- as.numeric(nh_names$Id2)
map_jc@data <- full_join(map_jc@data, nh_names, by = c('TRACT' = 'Id2'))
map_jc@data$l_line1 <- paste("Tract #:", map_jc@data$TRACT, "in the")
map_jc@data$l_line2 <- paste(map_jc@data$Neighborhood, "neighborhood")
rm(nh_names)
#Zip Code map
map_jc_zip = readOGR('data/maps/zip', layer = 'Jefferson_County_KY_ZIP_Codes',
GDAL1_integer64_policy = TRUE, stringsAsFactors = FALSE, verbose = FALSE)
map_jc_zip$ZIPCODE <- as.numeric(map_jc_zip$ZIPCODE)
map_jc_zip@data$l_line1 <- paste0("Zip Code ", map_jc_zip@data$ZIPCODE)
web = TRUE
earn_data_05_16 <- acs_time("/data/jobs/S2001/05/")
earn_data_17 <- acs_time("/data/jobs/S2001/17/", starting_year = 2017)
earn_data_05_16 %<>%
select(FIPS,
year,
pop = `Total; Estimate; Population 16 years and over with earnings`,
pop_male =`Male; Estimate; Population 16 years and over with earnings`,
pop_female = `Female; Estimate; Population 16 years and over with earnings`,
pop_ft = `Total; Estimate; Population 16 years and over with earnings - Full-time, year-round workers with earnings`,
pop_ft_male = `Male; Estimate; Population 16 years and over with earnings - Full-time, year-round workers with earnings`,
pop_ft_female = `Female; Estimate; Population 16 years and over with earnings - Full-time, year-round workers with earnings`,
median_earnings = `Total; Estimate; Population 16 years and over with earnings - Median earnings (dollars)`,
median_earnings_male = `Male; Estimate; Population 16 years and over with earnings - Median earnings (dollars)`,
median_earnings_female = `Female; Estimate; Population 16 years and over with earnings - Median earnings (dollars)`,
median_earnings_ft = `Total; Estimate; Population 16 years and over with earnings - Full-time, year-round workers with earnings - Mean earnings (dollars)`,
median_earnings_ft_male = `Male; Estimate; Population 16 years and over with earnings - Full-time, year-round workers with earnings - Median earnings (dollars)`,
median_earnings_ft_female = `Female; Estimate; Population 16 years and over with earnings - Full-time, year-round workers with earnings - Median earnings (dollars)`) %>%
mutate_at(vars(pop, pop_male, pop_female, pop_ft, pop_ft_male, pop_ft_female,
median_earnings, median_earnings_male, median_earnings_female,
median_earnings_ft, median_earnings_ft_male, median_earnings_ft_female),
as.numeric)
earn_data_17 %<>%
select(FIPS,
year,
pop = `Total; Estimate; Population 16 years and over with earnings`,
pop_male =`Male; Estimate; Population 16 years and over with earnings`,
pop_female = `Female; Estimate; Population 16 years and over with earnings`,
pop_ft = `Total; Estimate; FULL-TIME, YEAR-ROUND WORKERS WITH EARNINGS`,
pop_ft_male = `Male; Estimate; FULL-TIME, YEAR-ROUND WORKERS WITH EARNINGS`,
pop_ft_female = `Female; Estimate; FULL-TIME, YEAR-ROUND WORKERS WITH EARNINGS`,
median_earnings = `Total; Estimate; Median earnings (dollars)`,
median_earnings_male = `Male; Estimate; Median earnings (dollars)`,
median_earnings_female = `Female; Estimate; Median earnings (dollars)`,
median_earnings_ft = `Total; Estimate; Median earnings (dollars) for full-time, year-round workers with earnings`,
median_earnings_ft_male = `Male; Estimate; Mean earnings (dollars) for full-time, year-round workers with earnings`,
median_earnings_ft_female = `Female; Estimate; Mean earnings (dollars) for full-time, year-round workers with earnings`) %>%
mutate_at(vars(pop, pop_male, pop_female, pop_ft, pop_ft_male, pop_ft_female,
median_earnings, median_earnings_male, median_earnings_female,
median_earnings_ft, median_earnings_ft_male, median_earnings_ft_female),
as.numeric)
earn_data <- bind_rows(earn_data_05_16, earn_data_17)
earn_data <- bind_df(
earn_data %>% weight_stl("median_earnings", "pop"),
earn_data %>% weight_stl("median_earnings_male", "pop_male"),
earn_data %>% weight_stl("median_earnings_female", "pop_female"),
earn_data %>% weight_stl("median_earnings_ft", "pop_ft"),
earn_data %>% weight_stl("median_earnings_ft_male", "pop_ft_male"),
earn_data %>% weight_stl("median_earnings_ft_female", "pop_ft_female"))
data <- earn_data
data %<>% pull_peers_FIPS() %>% select(FIPS, city, year, current, baseline, everything())
rm(earn_data_05_16, earn_data_17, earn_data)
rpp <- read_csv("data/jobs/rppmsa.csv", skip = 4, col_names = TRUE, na = c("", "(NA)"))
rpp$`2005` <- rpp$`2008`
rpp$`2006` <- rpp$`2008`
rpp$`2007` <- rpp$`2008`
rpp$`2016` <- rpp$`2015`
rpp$`2017` <- rpp$`2015`
rpp <- rpp %>%
filter(LineCode == 4) %>%
select(-GeoFips, -LineCode, -Description) %>%
gather(2:14, key = year, value = "rpp") %>%
mutate(year = as.numeric(year))
rpp$MSA <- substr(rpp$GeoName, 0, unlist(gregexpr(pattern = " \\(", rpp$GeoName)) -1 )
rpp$MSA[rpp$MSA == "Grand Rapids-Wyoming, MI"] = "Grand Rapids"
rpp$MSA[rpp$MSA == "St. Louis, MO-IL"] = "St. Louis"
rpp$MSA[rpp$MSA == "Oklahoma City, OK"] = "Oklahoma City"
rpp$MSA[rpp$MSA == "Tulsa, OK"] = "Tulsa"
rpp$MSA[rpp$MSA == "Greenville-Anderson-Mauldin, SC"] = "Greenville"
rpp$MSA[rpp$MSA == "Knoxville, TN"] = "Knoxville"
rpp$MSA[rpp$MSA == "Birmingham-Hoover, AL"] = "Birmingham"
rpp$MSA[rpp$MSA == "Louisville/Jefferson County, KY-IN"] = "Louisville"
rpp$MSA[rpp$MSA == "Indianapolis-Carmel-Anderson, IN"] = "Indianapolis"
rpp$MSA[rpp$MSA == "Kansas City, MO-KS"] = "Kansas City"
rpp$MSA[rpp$MSA == "Omaha-Council Bluffs, NE-IA"] = "Omaha"
rpp$MSA[rpp$MSA == "Greensboro-High Point, NC"] = "Greensboro"
rpp$MSA[rpp$MSA == "Charlotte-Concord-Gastonia, NC-SC"] = "Charlotte"
rpp$MSA[rpp$MSA == "Columbus, OH"] = "Columbus"
rpp$MSA[rpp$MSA == "Cincinnati, OH-KY-IN"] = "Cincinnati"
rpp$MSA[rpp$MSA == "Nashville-Davidson--Murfreesboro--Franklin, TN"] = "Nashville"
rpp$MSA[rpp$MSA == "Memphis, TN-MS-AR"] = "Memphis"
rpp$MSA[rpp$MSA == "Jacksonville, FL"] = "Jacksonville"
rpp$MSA[rpp$MSA == "Raleigh, NC"] = "Raleigh"
rpp$MSA[rpp$MSA == "Dayton, OH"] = "Dayton"
rpp$MSA[rpp$MSA == "Richmond, VA"] = "Richmond"
rpp %<>% select(-GeoName)
data %<>% left_join(rpp, by = c('year' = 'year', 'city' = 'MSA'))
data %<>%
group_by(year) %>%
mutate(rpp_lou = rpp[city == "Louisville"],
rpp_index = rpp_lou / rpp) %>%
ungroup() %>%
select(-rpp, -rpp_lou)
cpi <- read_csv("data/jobs/CPI-U-RS.csv")
cpi %<>%
rename(year = YEAR,
cpi = AVG)
data %<>% left_join(cpi, by = "year")
data %<>%
group_by(city) %>%
mutate(base_cpi = cpi[year == 2017],
cpi_index = base_cpi/cpi) %>%
ungroup() %>%
select(-cpi, -base_cpi)
rpp_col_adj <- function(x){
x *  data$rpp_index * data$cpi_index
}
data %<>% mutate_at(vars(median_earnings, median_earnings_male, median_earnings_female,
median_earnings_ft, median_earnings_ft_male, median_earnings_ft_female), rpp_col_adj)
rm(rpp, cpi)
rank_and_nb_group(data[data$year == 2017,],
'median_earnings',
plot_title = 'Median Earnings, 2017')
earn_data_white <- acs_time("/data/jobs/B20017H/")
